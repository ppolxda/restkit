# -*- coding: utf-8 -*-
"""
@create: 2019-08-23 16:11:53.

@author: name

@desc: error_info
"""
import os
import copy
import gettext
import functools
from collections import defaultdict


def gen_trans(project_name):
    trans = defaultdict(list)
    for key in DEFINE_LANGS:
        trans[key].append(gettext.translation(
            project_name,
            localedir=LANGS_PATH,
            languages=[key]
        ))
    return trans


DEFAULT_LANG = 'en'
NULL_TRANS = gettext.NullTranslations()
LANGS_LIST = os.environ.get('LANGS_LIST', 'en,en_US,zh,zh_CN')
LANGS_PATH = os.environ.get('LANGS_PATH', './config/locales')
DEFAULT_LANG = os.environ.get('LANG_DEFAULT', DEFAULT_LANG)
DEFINE_LANGS = set(LANGS_LIST.split(',') + [DEFAULT_LANG])
DEFINE_TRANS = gen_trans('restkit')


def register_trans(trans):

    if not isinstance(trans, dict):
        raise TypeError('register_trans trans invaild')

    for _trans in trans.values():
        if not isinstance(_trans, list):
            raise TypeError('register_trans trans invaild')

        for tran in _trans:
            if not isinstance(tran, gettext.NullTranslations):
                raise TypeError('register_trans trans invaild')

    if DEFAULT_LANG not in trans:
        raise TypeError('register_trans default lang tran not found')

    global DEFINE_TRANS
    for lang, _list in DEFINE_TRANS.items():
        DEFINE_TRANS[lang] = _list + trans.get(lang, [])


def register_trans_by_name(project_name):
    trans = gen_trans(project_name)
    register_trans(trans)


class TextString(object):
    """TextString."""

    FUNC_TYPE = [None, '@@add', '@@radd', '@@join',
                 '@@format', '@@format_map']

    def __init__(self, message, func=None, *args, **kwargs):
        # super(TextString, self).__init__(message)
        self.__strcache = {}
        self.__message = message
        self.__func = func
        self.__args = args
        self.__kwargs = kwargs

        if self.__func not in self.FUNC_TYPE:
            raise TypeError('func invaild')

    # ----------------------------------------------
    #        read only
    # ----------------------------------------------

    @property
    def message(self):
        return self.__message

    @property
    def func(self):
        return self.__func

    @property
    def args(self):
        return self.__args

    @property
    def kwargs(self):
        return self.__kwargs

    # ----------------------------------------------
    #        string func
    # ----------------------------------------------

    def __add__(self, other):
        return TextString(self, '@@add', other)

    def __iadd__(self, other):
        return self.__add__(other)

    def __radd__(self, other):
        return TextString(self, '@@radd', other)

    def __mod__(self, other):
        if isinstance(other, dict):
            args = []
            kwargs = other
        else:
            args = other
            kwargs = {}

        return TextString(self, *args, **kwargs)

    def __contains__(self, key):
        return key in self.to_string()

    def find(self, sub, start=None, end=None):
        return self.to_string().find(sub, start, end)

    def format(self, *args, **kwargs):
        return TextString(self, '@@format', *args, **kwargs)

    def format_map(self, **mapping):
        return TextString(self, '@@format_map', **mapping)

    def join(self, _iter):
        return TextString(self, '@@join', _iter)

    # ----------------------------------------------
    #        languages change
    # ----------------------------------------------

    def __str__(self):
        return self.to_string()

    @staticmethod
    def t_string(lang, obj):
        return obj.to_string(lang) if isinstance(obj, TextString) else obj

    def gettext(self, message, lang=None):
        if lang is None:
            lang = DEFAULT_LANG

        trans = DEFINE_TRANS.get(lang, [])
        if not trans:
            return message

        for tran in trans:
            _message = tran.gettext(message)
            if _message != message:
                return _message

        return message

    def to_string(self, lang=None):
        if lang in self.__strcache:
            return self.__strcache[lang]

        if isinstance(self.message, TextString):
            message = self.message.to_string(lang)
        else:
            message = self.message

        t_string = functools.partial(self.t_string, lang)
        message = self.gettext(message, lang)

        # conv parames
        args = [t_string(i) for i in self.args]
        kwargs = {
            t_string(key): t_string(val)
            for key, val in self.kwargs.items()
        }

        if self.func == '@@add':
            _message = ''.join([message, args[0]])
        elif self.func == '@@radd':
            _message = ''.join([args[0], message])
        elif self.func == '@@join':
            _message = message.join(
                map(t_string, args[0])
            )
        elif self.func == '@@format':
            _message = message.format(*args, **kwargs)
        elif self.func == '@@format_map':
            _message = message.format_map(**kwargs)
        else:
            _message = message

        self.__strcache[lang] = _message
        return _message


_ = TextString
_T = TextString
_N = TextString
_L = TextString


class ErrorInfo(object):

    # Array Begin
    {% for row in error_infos %}
    {{ row[1] if row[1].startswith('ERROR_') else '_'.join(['ERROR', row[1]]) }} = '{{ row[0] }}'  # {{ row[2] }}  # noqa
    {% end %}
    # Array End

    ERROR_DESCRIBE = {
        # Array Begin
        {% for row in error_infos %}
        {{ row[1] if row[1].startswith('ERROR_') else '_'.join(['ERROR', row[1]]) }}: _(u'{{ row[2] }}'),  # noqa{% end %}
        # Array End
    }

    @staticmethod
    def default_lang():
        return DEFAULT_LANG

    @staticmethod
    def get_langs(*args):
        for i in args:
            if i in DEFINE_LANGS:
                return i
        return DEFAULT_LANG

    @staticmethod
    def is_invaild_lang(val):
        return val not in DEFINE_TRANS

    @staticmethod
    def get_trans(lang):
        return DEFINE_TRANS.get(lang, NULL_TRANS)

    @classmethod
    def trans(cls, lang, val):
        trans = cls.get_trans(lang)
        for tran in trans:
            reuslt = tran.gettext(val)
            if reuslt != val:
                return val
        return val

    @staticmethod
    def t_string(lang, obj):
        return obj.to_string(lang) if isinstance(obj, TextString) else obj

    @classmethod
    def append_errors(cls, **kwargs):
        new_keys = set(kwargs.keys())
        old_keys = set(cls.ERROR_DESCRIBE.keys())
        same = old_keys & new_keys
        if same:
            raise TypeError(
                'error code duplicate [{}]'.format(diff)
            )
        cls.ERROR_DESCRIBE.update(kwargs)

    @classmethod
    def error_text(cls, error_num, **kwargs):
        """error_text."""
        result = cls.ERROR_DESCRIBE.get(error_num, None)
        if result is None:
            result = cls.ERROR_DESCRIBE.get(cls.ERROR_UNKNOW)

        if '{' in result and '}' in result:
            try:
                return result.format(**kwargs)
            except Exception:
                return result
        else:
            return result


error_info = ErrorInfo()
